declare lower;

input lengthEMA = 20; # Number of days for EMA
input numDev = 2; # Number of standard deviations
input price = close; # Default price to use in calculations

# Calculate the 20-day EMA
def ema20 = ExpAverage(price, lengthEMA);

# Calculate the standard deviation of the price from the EMA
def priceDiff = price - ema20;
def stdDevPrice = StDev(priceDiff, lengthEMA);

# Calculate the upper and lower bounds as two standard deviations from the EMA
def upperBound = ema20 + numDev * stdDevPrice;
def lowerBound = ema20 - numDev * stdDevPrice;

# Plot the EMA, Upper Bound, and Lower Bound
plot EMA20Plot = ema20;
EMA20Plot.SetDefaultColor(GetColor(1));
plot UpperBoundPlot = upperBound;
UpperBoundPlot.SetDefaultColor(GetColor(2));
plot LowerBoundPlot = lowerBound;
LowerBoundPlot.SetDefaultColor(GetColor(3));

# Add Clouds for visual representation
AddCloud(EMA20Plot, UpperBoundPlot, Color.LIGHT_RED);
AddCloud(EMA20Plot, LowerBoundPlot, Color.LIGHT_GREEN);

# Indicate when price is two standard deviations from the EMA
plot SignalPlot = if price >= UpperBoundPlot or price <= LowerBoundPlot then price else Double.NaN;
SignalPlot.SetPaintingStrategy(PaintingStrategy.POINTS);
SignalPlot.SetDefaultColor(GetColor(4));
SignalPlot.SetLineWeight(3);
SignalPlot.HideTitle();

# Add labels to indicate when conditions are met
AddLabel(price >= UpperBoundPlot, "Price is above Upper Bound", Color.RED);
AddLabel(price <= LowerBoundPlot, "Price is below Lower Bound", Color.GREEN);
